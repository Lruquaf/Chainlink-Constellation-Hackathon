{
  "address": "0x2a4862CF33A44a7438CC49dd1442B65f4b6E951e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_generalUris",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "_beneficiary1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_updatePrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_vrfSubscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_automationRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_functionsRouter",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_functionsSubscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_donID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerIsNotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBeneficiaryAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "MintRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "generalId",
          "type": "uint256"
        }
      ],
      "name": "NftMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_tokenUris",
          "type": "string[]"
        }
      ],
      "name": "addTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automationRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automationSubscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBeneficiary",
          "type": "address"
        }
      ],
      "name": "changeBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "functionsRequestId",
          "type": "uint256"
        }
      ],
      "name": "functionsRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requesterTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "functionsRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "functionsSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "generalUris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneralUris",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInGas",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPriceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpdatePriceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkToken",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_automationSubscriptionId",
          "type": "uint256"
        }
      ],
      "name": "setAutomation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "source",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "topUpAutomationSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "topUpFunctionsSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "topUpVRFSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newUri",
          "type": "string"
        }
      ],
      "name": "updateUri",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vrfRequestId",
          "type": "uint256"
        }
      ],
      "name": "vrfRrequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "vrfRequester",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fa2b5584fde59ec9f2226bb697f6a8a37a91398480f2c5c1ef1208661c8c9e8",
  "receipt": {
    "to": null,
    "from": "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
    "contractAddress": "0x2a4862CF33A44a7438CC49dd1442B65f4b6E951e",
    "transactionIndex": 2,
    "gasUsed": "6311770",
    "logsBloom": "0x
    "blockHash": "0x573050bd0d802f654cd15c00dd27a6ea8e34450563ac1e6d0b21b39663d50400",
    "transactionHash": "0x9fa2b5584fde59ec9f2226bb697f6a8a37a91398480f2c5c1ef1208661c8c9e8",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 4861205,
        "transactionHash": "0x9fa2b5584fde59ec9f2226bb697f6a8a37a91398480f2c5c1ef1208661c8c9e8",
        "address": "0x2a4862CF33A44a7438CC49dd1442B65f4b6E951e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c85c392654b161e9a16f8f8766db5e75620dd276"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x573050bd0d802f654cd15c00dd27a6ea8e34450563ac1e6d0b21b39663d50400"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 4861205,
        "transactionHash": "0x9fa2b5584fde59ec9f2226bb697f6a8a37a91398480f2c5c1ef1208661c8c9e8",
        "address": "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002a4862cf33a44a7438cc49dd1442b65f4b6e951e",
          "0x000000000000000000000000c532a74256d3db42d0bf7a0400fefdbad7694008"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x573050bd0d802f654cd15c00dd27a6ea8e34450563ac1e6d0b21b39663d50400"
      }
    ],
    "blockNumber": 4861205,
    "cumulativeGasUsed": "6353770",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/1.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/2.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/3.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/4.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/5.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/6.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/7.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/8.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/9.json",
      "https://nftstorage.link/ipfs/bafybeifo2pwz53ac25zgw2d7tqs5hi6eorvotdq7sj4yf5oc5gkopny7tm/10.json"
    ],
    "0xA7a44587F24bcA4513A8B5D9e8320B1B297efA1c",
    "0x0d087823f0B0E6d5d7dE7eD56636763eeCB52945",
    "20000000000000000000",
    "10000000000000000000",
    "0x694AA1769357215DE4FAC081bf1f309aDC325306",
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "7590",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "3",
    "1000000",
    "0x779877A7B0D9E8603169DdbD7836e478b4624789",
    "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
    "0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008",
    "0x86EFBD0b6736Bed994962f9797049422A3A8E8Ad",
    "0xb83E47C2bC239B3bf370bc41e1459A34b41238D0",
    "1795",
    "300000",
    "0x66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000"
  ],
  "numDeployments": 17,
  "solcInputHash": "6d846fa8c85c5cb7cfc8a1f26805c355",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_generalUris\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_beneficiary1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_vrfSubscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_automationRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_functionsRouter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_functionsSubscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_donID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBeneficiaryAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"generalId\",\"type\":\"uint256\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tokenUris\",\"type\":\"string[]\"}],\"name\":\"addTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automationRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automationSubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"functionsRequestId\",\"type\":\"uint256\"}],\"name\":\"functionsRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requesterTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionsRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionsSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generalUris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneralUris\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInGas\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpdatePriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_automationSubscriptionId\",\"type\":\"uint256\"}],\"name\":\"setAutomation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topUpAutomationSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topUpFunctionsSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"topUpVRFSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newUri\",\"type\":\"string\"}],\"name\":\"updateUri\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vrfRequestId\",\"type\":\"uint256\"}],\"name\":\"vrfRrequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vrfRequester\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MagisterMilitum.sol\":\"MagisterMilitum\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        //amount of tokens we are sending in\\r\\n        uint256 amountIn,\\r\\n        //the minimum amount of tokens we want out of the trade\\r\\n        uint256 amountOutMin,\\r\\n        //list of token addresses we are going to trade in.  this is necessary to calculate amounts\\r\\n        address[] calldata path,\\r\\n        //this is the address we are going to send the output tokens to\\r\\n        address to,\\r\\n        //the last time that the trade is valid for\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xf454b8dba0879d76086a9ad5c878022f5d9e3e4c2483ba306785fa89d940e799\",\"license\":\"MIT\"},\"contracts/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint) external;\\r\\n\\r\\n    function approve(address, uint) external returns (bool);\\r\\n\\r\\n    function transfer(address, uint) external returns (bool);\\r\\n\\r\\n    function transferFrom(address, address, uint) external returns (bool);\\r\\n\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x666bba6ba8faeee04aef949bf83699aa71bfbede2cb730036e56d2622e85857f\",\"license\":\"MIT\"},\"contracts/MagisterMilitum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\nimport {IUniswapV2Router} from \\\"./IUniswapV2Router.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\nerror TransferFailed();\\nerror InsufficientEth();\\nerror NotBeneficiaryAddress();\\nerror NotMinterContract();\\nerror TokenDoesNotExist();\\nerror CallerIsNotTokenOwner();\\n\\ncontract MagisterMilitum is\\n    Ownable,\\n    ERC721,\\n    VRFConsumerBaseV2,\\n    AutomationCompatibleInterface,\\n    FunctionsClient\\n{\\n    using FunctionsRequest for FunctionsRequest.Request;\\n    event NftMinted(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed generalId\\n    );\\n\\n    event MintRequested(uint256 requestId, address indexed requester);\\n\\n    uint256 private tokenCounter;\\n\\n    mapping(uint256 tokenId => string tokenUri) private tokenUris;\\n    string[] public generalUris;\\n\\n    address private beneficiary1;\\n    address private beneficiary2;\\n    mapping(address beneficiary => uint256 amount) private proceeds;\\n\\n    uint256 public immutable tokenPrice; // in USD\\n    uint256 public immutable updatePrice; // in USD\\n    AggregatorV3Interface public immutable priceFeed;\\n\\n    VRFCoordinatorV2Interface public vrfCoordinator;\\n    uint64 public vrfSubscriptionId;\\n    bytes32 public keyHash;\\n    uint16 public requestConfirmations;\\n    uint32 public callbackGasLimit;\\n    uint32 public numWords = 1;\\n    mapping(uint256 vrfRequestId => address vrfRequester) public vrfRrequests;\\n\\n    LinkTokenInterface public linkToken;\\n\\n    IWETH public weth;\\n    IUniswapV2Router public uniswapRouter;\\n\\n    address public automationRegistry;\\n    uint256 public automationSubscriptionId;\\n\\n    address public functionsRouter;\\n    string public source =\\n        \\\"const [originalUri, newUri] = args;\\\"\\n        \\\"let isValid = 0;\\\"\\n        \\\"const makeHttpRequest = async (uri) => {\\\"\\n        \\\"const response = await Functions.makeHttpRequest({ url: uri });\\\"\\n        \\\"if (response.error) {\\\"\\n        \\\"console.error(response.error);\\\"\\n        \\\"throw Error(`${uri} Api Request failed`);\\\"\\n        \\\"}\\\"\\n        \\\"return response.data;\\\"\\n        \\\"};\\\"\\n        \\\"const originalData = await makeHttpRequest(originalUri);\\\"\\n        \\\"const newData = await makeHttpRequest(newUri);\\\"\\n        \\\"console.log('Original API response data:', JSON.stringify(originalData, null, 2));\\\"\\n        \\\"console.log('New API response data:', JSON.stringify(newData, null, 2));\\\"\\n        \\\"const checkAttributes = (attr1, attr2) => attr1.length === attr2.length && attr1.every((a, i) => a.trait_type === attr2[i].trait_type && (a.value <= 100 && a.value >= 0));\\\"\\n        \\\"if (\\\"\\n        \\\"Object.keys(originalData).length === Object.keys(newData).length &&\\\"\\n        \\\"originalData.name === newData.name &&\\\"\\n        \\\"originalData.title === newData.title &&\\\"\\n        \\\"originalData.description === newData.description &&\\\"\\n        \\\"originalData.image === newData.image &&\\\"\\n        \\\"checkAttributes(originalData.attributes, newData.attributes)\\\"\\n        \\\") {\\\"\\n        \\\"isValid = 1;\\\"\\n        \\\"}\\\"\\n        \\\"const returnedValue = isValid ? newUri : 'invalid input';\\\"\\n        \\\"return Functions.encodeString(returnedValue);\\\";\\n    uint64 public functionsSubscriptionId;\\n    uint32 public gasLimit;\\n    bytes32 public donID;\\n    mapping(uint256 functionsRequestId => uint256 requesterTokenId)\\n        public functionsRequests;\\n\\n    bytes public lastResponse;\\n    bytes public lastError;\\n\\n    constructor(\\n        string[] memory _generalUris,\\n        address _beneficiary1,\\n        address _beneficiary2,\\n        uint256 _tokenPrice,\\n        uint256 _updatePrice,\\n        address _priceFeed,\\n        address _vrfCoordinator,\\n        uint64 _vrfSubscriptionId,\\n        bytes32 _keyHash,\\n        uint16 _requestConfirmations,\\n        uint32 _callbackGasLimit,\\n        address _linkToken,\\n        address _weth,\\n        address _uniswapRouter,\\n        address _automationRegistry,\\n        address _functionsRouter,\\n        uint64 _functionsSubscriptionId,\\n        uint32 _gasLimit,\\n        bytes32 _donID\\n    )\\n        ERC721(\\\"Magister Militum\\\", \\\"MM\\\")\\n        Ownable(msg.sender)\\n        VRFConsumerBaseV2(_vrfCoordinator)\\n        FunctionsClient(_functionsRouter)\\n    {\\n        tokenCounter = 0;\\n        generalUris = _generalUris;\\n        beneficiary1 = _beneficiary1;\\n        beneficiary2 = _beneficiary2;\\n\\n        tokenPrice = _tokenPrice;\\n        updatePrice = _updatePrice;\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n\\n        vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        vrfSubscriptionId = _vrfSubscriptionId;\\n        keyHash = _keyHash;\\n        callbackGasLimit = _callbackGasLimit;\\n        requestConfirmations = _requestConfirmations;\\n\\n        linkToken = LinkTokenInterface(_linkToken);\\n\\n        uniswapRouter = IUniswapV2Router(_uniswapRouter);\\n        weth = IWETH(_weth);\\n        weth.approve(address(uniswapRouter), type(uint256).max);\\n\\n        automationRegistry = _automationRegistry;\\n\\n        functionsRouter = _functionsRouter;\\n        functionsSubscriptionId = _functionsSubscriptionId;\\n        gasLimit = _gasLimit;\\n        donID = _donID;\\n    }\\n\\n    function setAutomation(uint256 _automationSubscriptionId) public onlyOwner {\\n        automationSubscriptionId = _automationSubscriptionId;\\n    }\\n\\n    modifier onlyBeneficiaries() {\\n        if (msg.sender != beneficiary1 && msg.sender != beneficiary2) {\\n            revert NotBeneficiaryAddress();\\n        }\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////////// PRICE FEED SECTION //////////////////\\n    ////////////////////////////////////////////////////////\\n\\n    function getPrice(uint256 _amountInGas) public view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        uint256 _amountInUsd = (uint256(answer) * 1e10 * _amountInGas) / 1e18;\\n        return _amountInUsd;\\n    }\\n\\n    function getTokenPriceInEth() public view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        return\\n            uint256((tokenPrice * 1e18) / (uint256(answer) * 1e10)) +\\n            0.0001 ether; // without this addition value, the amount may be below of token price in USD\\n    }\\n\\n    function getUpdatePriceInEth() public view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        return\\n            uint256((updatePrice * 1e18) / (uint256(answer) * 1e10)) +\\n            0.0001 ether; // without this addition value, the amount may be below of token price in USD\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////////// VRF SECTION /////////////////////////\\n    ////////////////////////////////////////////////////////\\n\\n    function mintNft() public payable {\\n        if (getPrice(msg.value) < tokenPrice) {\\n            revert InsufficientEth();\\n        }\\n\\n        uint256 _requestId = vrfCoordinator.requestRandomWords(\\n            keyHash,\\n            vrfSubscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        vrfRrequests[_requestId] = msg.sender;\\n        weth.deposit{value: msg.value}();\\n        emit MintRequested(_requestId, msg.sender);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        uint256 _randomIndex = _randomWords[0] % generalUris.length;\\n        address _to = vrfRrequests[_requestId];\\n        _mint(_to, tokenCounter);\\n        tokenUris[tokenCounter] = generalUris[_randomIndex];\\n        emit NftMinted(_to, tokenCounter, _randomIndex);\\n        tokenCounter++;\\n    }\\n\\n    function topUpVRFSubscription(uint256 _amount) public {\\n        linkToken.transferAndCall(\\n            address(vrfCoordinator),\\n            _amount,\\n            abi.encode(vrfSubscriptionId)\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////////// AUTOMATION SECTION //////////////////\\n    ////////////////////////////////////////////////////////\\n\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        upkeepNeeded = (weth.balanceOf(address(this)) >= 0.02 ether);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        if (weth.balanceOf(address(this)) >= 0.02 ether) {\\n            swapTokens();\\n            distributeTokens();\\n        }\\n    }\\n\\n    function topUpAutomationSubscription(\\n        uint256 _amount\\n    ) public /*only zartzurt*/ {\\n        linkToken.transferAndCall(\\n            automationRegistry,\\n            _amount,\\n            abi.encode(automationSubscriptionId)\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////// FUNCTIONS SECTION ///////////////////////\\n    ////////////////////////////////////////////////////////\\n\\n    function updateUri(uint256 _tokenId, string memory _newUri) public payable {\\n        if (getPrice(msg.value) < updatePrice) {\\n            revert InsufficientEth();\\n        }\\n        if (ownerOf(_tokenId) != msg.sender) {\\n            revert CallerIsNotTokenOwner();\\n        }\\n        string memory _originalUri = tokenUris[_tokenId];\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(source);\\n        string[] memory args = new string[](2);\\n        args[0] = _originalUri;\\n        args[1] = _newUri;\\n        if (args.length > 0) req.setArgs(args);\\n        uint256 _requestId = uint256(\\n            _sendRequest(\\n                req.encodeCBOR(),\\n                functionsSubscriptionId,\\n                gasLimit,\\n                donID\\n            )\\n        );\\n        functionsRequests[_requestId] = _tokenId;\\n        weth.deposit{value: msg.value}();\\n    }\\n\\n    function fulfillRequest(\\n        bytes32 _requestId,\\n        bytes memory _response,\\n        bytes memory _err\\n    ) internal override {\\n        lastResponse = _response;\\n        lastError = _err;\\n        string memory newUri = string(_response);\\n        if (_response.length != 0) {\\n            if (keccak256(bytes(newUri)) != keccak256(bytes(\\\"invalid input\\\"))) {\\n                tokenUris[functionsRequests[uint256(_requestId)]] = newUri;\\n            }\\n        }\\n        // if error is not empty ...\\n    }\\n\\n    function topUpFunctionsSubscription(uint256 _amount) public {\\n        linkToken.transferAndCall(\\n            functionsRouter,\\n            _amount,\\n            abi.encode(functionsSubscriptionId)\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////// SWAP AND DISTRIBUTE SECTION /////////////\\n    ////////////////////////////////////////////////////////\\n\\n    function swapTokens() public {\\n        address _tokenIn = address(weth);\\n        address _tokenOut = address(linkToken);\\n        uint256 _amountIn = weth.balanceOf(address(this));\\n        uint256 _amountOutMin = getAmountOutMin(_tokenIn, _tokenOut, _amountIn);\\n\\n        address[] memory path;\\n        if (_tokenIn == address(weth) || _tokenOut == address(weth)) {\\n            path = new address[](2);\\n            path[0] = _tokenIn;\\n            path[1] = _tokenOut;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _tokenIn;\\n            path[1] = address(weth);\\n            path[2] = _tokenOut;\\n        }\\n\\n        uniswapRouter.swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function getAmountOutMin(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) public view returns (uint256) {\\n        address[] memory path;\\n\\n        if (_tokenIn == address(weth) || _tokenOut == address(weth)) {\\n            path = new address[](2);\\n            path[0] = _tokenIn;\\n            path[1] = _tokenOut;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _tokenIn;\\n            path[1] = address(weth);\\n            path[2] = _tokenOut;\\n        }\\n\\n        uint256[] memory amountOutMins = IUniswapV2Router(uniswapRouter)\\n            .getAmountsOut(_amountIn, path);\\n        return amountOutMins[path.length - 1];\\n    }\\n\\n    function distributeTokens() public {\\n        uint256 _balance = linkToken.balanceOf(address(this));\\n        topUpVRFSubscription(_balance / 5);\\n        topUpAutomationSubscription(_balance / 5);\\n        topUpFunctionsSubscription(_balance / 5);\\n        proceeds[beneficiary1] += _balance / 5;\\n        proceeds[beneficiary2] += _balance / 5;\\n    }\\n\\n    //////////////////////////////////////////////////\\n\\n    function withdrawFunds() public onlyBeneficiaries {\\n        uint256 _amount = proceeds[msg.sender];\\n        proceeds[msg.sender] = 0;\\n        (bool success, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    function addTokenUri(string[] memory _tokenUris) public onlyOwner {\\n        for (uint256 i = 0; i < _tokenUris.length; ) {\\n            generalUris.push(_tokenUris[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function changeBeneficiary(\\n        address _newBeneficiary\\n    ) public onlyBeneficiaries {\\n        if (msg.sender == beneficiary1) {\\n            uint256 _amount = proceeds[msg.sender];\\n            proceeds[msg.sender] = 0;\\n            proceeds[_newBeneficiary] += _amount;\\n            beneficiary1 = _newBeneficiary;\\n        } else {\\n            uint256 _amount = proceeds[msg.sender];\\n            proceeds[msg.sender] = 0;\\n            proceeds[_newBeneficiary] += _amount;\\n            beneficiary2 = _newBeneficiary;\\n        }\\n    }\\n\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view override returns (string memory) {\\n        if (_tokenId >= tokenCounter) {\\n            revert TokenDoesNotExist();\\n        }\\n        return tokenUris[_tokenId];\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return tokenCounter;\\n    }\\n\\n    function getGeneralUris() public view returns (string[] memory) {\\n        string[] memory _generalUris = new string[](generalUris.length);\\n        for (uint256 i = 0; i < generalUris.length; i++) {\\n            _generalUris[i] = generalUris[i];\\n        }\\n        return _generalUris;\\n    }\\n\\n    function getProceeds(address _beneficiary) public view returns (uint256) {\\n        return proceeds[_beneficiary];\\n    }\\n}\\n\",\"keccak256\":\"0xc1ee04962e81492de8665bfed365740ea04777f0fd4d6b93348de34cca49e98f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102806040523462000efe5762005ef080380380916200002282610280620013b7565b610280396102800161026061028082031262000efe57610280516001600160401b03811162000efe57610280019080601f8301121562000efe578151916001600160401b0383116200104a578260051b926200008a60405180610260526020860190620013b7565b610260515260208061026051019384610240528201019082821162000efe5760208101935b828510620012ec57620000c46102a0620013db565b620000d16102c0620013db565b6102e0516103005190620000e7610320620013db565b620000f4610340620013db565b9262000102610360620013f0565b926101006102800151956101206102800151806102205261ffff81160362000efe57620001316103c062001405565b61014052620001426103e0620013db565b6102005262000153610400620013db565b6101805262000164610420620013db565b6101e05262000175610440620013db565b6101605262000186610460620013db565b6101205262000197610480620013f0565b6101c052620001a86104a062001405565b6101a052610240610280015197604051620001c3816200139b565b601081526f4d61676973746572204d696c6974756d60801b602082015260405190620001ef826200139b565b60028252614d4d60f01b60208301523315620012d35760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a38051906001600160401b0382116200104a5781906200026b60015462001417565b601f811162001291575b50602090601f8311600114620012135760009262001207575b50508160011b916000199060031b1c1916176001555b8051906001600160401b0382116200104a578190620002c560025462001417565b601f8111620011c5575b50602090601f831160011462001147576000926200113b575b50508160011b916000199060031b1c1916176002555b6080879052610120516001600160a01b031660a052600f805463ffffffff60301b191666010000000000001790556017546200033a9062001417565b601f8111620010ec575b506108b1601790815560009081527f636f6e7374205b6f726967696e616c5572692c206e65775572695d203d20617260008051602062005ed0833981519152557f67733b6c657420697356616c6964203d20303b636f6e7374206d616b654874747fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c16557f7052657175657374203d206173796e63202875726929203d3e207b636f6e73747fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c17557f20726573706f6e7365203d2061776169742046756e6374696f6e732e6d616b657fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c18557f4874747052657175657374287b2075726c3a20757269207d293b6966202872657fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c19557f73706f6e73652e6572726f7229207b636f6e736f6c652e6572726f72287265737fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1a557f706f6e73652e6572726f72293b7468726f77204572726f722860247b7572697d7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1b557f204170692052657175657374206661696c656460293b7d72657475726e2072657fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1c557f73706f6e73652e646174613b7d3b636f6e7374206f726967696e616c446174617fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1d557f203d206177616974206d616b654874747052657175657374286f726967696e617fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1e557f6c557269293b636f6e7374206e657744617461203d206177616974206d616b657fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1f557f4874747052657175657374286e6577557269293b636f6e736f6c652e6c6f67287fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c20557f274f726967696e616c2041504920726573706f6e736520646174613a272c204a7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c21557f534f4e2e737472696e67696679286f726967696e616c446174612c206e756c6c7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c22557f2c203229293b636f6e736f6c652e6c6f6728274e65772041504920726573706f7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c23557f6e736520646174613a272c204a534f4e2e737472696e67696679286e657744617fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c24557f74612c206e756c6c2c203229293b636f6e737420636865636b417474726962757fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c25557f746573203d202861747472312c20617474723229203d3e2061747472312e6c657fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c26557f6e677468203d3d3d2061747472322e6c656e6774682026262061747472312e657fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c27557f766572792828612c206929203d3e20612e74726169745f74797065203d3d3d207fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c28557f61747472325b695d2e74726169745f747970652026262028612e76616c7565207fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c29557f3c3d2031303020262620612e76616c7565203e3d203029293b696620284f626a7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c2a557f6563742e6b657973286f726967696e616c44617461292e6c656e677468203d3d7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c2b557f3d204f626a6563742e6b657973286e657744617461292e6c656e6774682026267fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c2c557f6f726967696e616c446174612e6e616d65203d3d3d206e6577446174612e6e617fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c2d557f6d652026266f726967696e616c446174612e7469746c65203d3d3d206e6577447fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c2e557f6174612e7469746c652026266f726967696e616c446174612e646573637269707fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c2f557f74696f6e203d3d3d206e6577446174612e6465736372697074696f6e2026266f7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c30557f726967696e616c446174612e696d616765203d3d3d206e6577446174612e696d7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c31557f616765202626636865636b41747472696275746573286f726967696e616c44617fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c32557f74612e617474726962757465732c206e6577446174612e6174747269627574657fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c33557f732929207b697356616c6964203d20313b7d636f6e73742072657475726e65647fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c34557f56616c7565203d20697356616c6964203f206e6577557269203a2027696e76617fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c35557f6c696420696e707574273b72657475726e2046756e6374696f6e732e656e636f7fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c36557f6465537472696e672872657475726e656456616c7565293b00000000000000007fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c375560075561026051516801000000000000000081116200104a576009548160095580821062001060575b50610240516009600090815260008051602062005e9083398151915292915b82821062000f18575050600a80546001600160a01b03199081166001600160a01b0395861617909155600b8054821695851695909517909455505060c09290925260e09290925291821661010052600d80546001600160e01b0319169483169490941760a09390931b600160a01b600160e01b031692909217909255600e92909255600f8054610220516101405165ffffffffffff1990921660109290921b65ffffffff0000169190911761ffff91909116179055610200516011805484169183169190911790556101e05160138054841691831691821790556101805160128054909416921691821790925560405163095ea7b360e01b815260048101929092526000196024830152602090829060449082906000905af1801562000f0c5762000ec8575b5061016051601480546001600160a01b03199081166001600160a01b039384161790915561012051601680549092169216919091179055601880546101a0516101c0516001600160601b03199092166001600160401b039290921691909117604091821b6bffffffff0000000000000000161790915560199190915551614a0290816200146e82396080518161255b015260a051818181610b8601526132bf015260c0518181816112d001528181611ba10152612048015260e05181818161063e0152818161156501526117500152610100518181816112930152818161152801528181611b3e0152612c660152f35b6020813d60201162000f03575b8162000ee460209383620013b7565b8101031262000efe57518015150362000efe578162000dd8565b600080fd5b3d915062000ed5565b6040513d6000823e3d90fd5b80518051906001600160401b0382116200104a5762000f38865462001417565b601f811162001008575b50602090601f831160011462000f9357928260019493602093869560009262000f87575b5050600019600383901b1c191690841b1787555b0194019101909262000cb2565b01519050388062000f66565b908660005260206000209160005b601f198516811062000fef575083602093600196938796938794601f1981161062000fd5575b505050811b01875562000f7a565b015160001960f88460031b161c1916905538808062000fc7565b9192602060018192868501518155019401920162000fa1565b6200103890876000526020600020601f850160051c810191602086106200103f575b601f0160051c019062001454565b8f62000f42565b90915081906200102a565b634e487b7160e01b600052604160045260246000fd5b600960005260008051602062005e90833981519152908282015b81830181106200108c57505062000c93565b806200109b6001925462001417565b80620010aa575b50016200107a565b601f81118314620010c25750600081555b8e620010a2565b600090828252620010e2601f60208420920160051c820185830162001454565b81835555620010bb565b60176000526200113490601f0160051c60008051602062005ed0833981519152017fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c3862001454565b8962000344565b015190508b80620002e8565b60026000908152935060008051602062005e7083398151915291905b601f1984168510620011a9576001945083601f198116106200118f575b505050811b01600255620002fe565b015160001960f88460031b161c191690558b808062001180565b8181015183556020948501946001909301929091019062001163565b6002600052620012009060008051602062005e70833981519152601f850160051c810191602086106200103f57601f0160051c019062001454565b8c620002cf565b015190508c806200028e565b60016000908152935060008051602062005eb083398151915291905b601f198416851062001275576001945083601f198116106200125b575b505050811b01600155620002a4565b015160001960f88460031b161c191690558c80806200124c565b818101518355602094850194600190930192909101906200122f565b6001600052620012cc9060008051602062005eb0833981519152601f850160051c810191602086106200103f57601f0160051c019062001454565b8d62000275565b604051631e4fbdf760e01b815260006004820152602490fd5b84516001600160401b03811162000efe57820184603f8201121562000efe5760208101516001600160401b03811162001386576040519162001339601f8301601f191660200184620013b7565b818352866040838301011162000efe5760005b8281106200136f57505091816000602080958195010152815201940193620000af565b80604060209284010151828287010152016200134c565b60246000634e487b7160e01b81526041600452fd5b604081019081106001600160401b038211176200104a57604052565b601f909101601f19168101906001600160401b038211908210176200104a57604052565b51906001600160a01b038216820362000efe57565b51906001600160401b038216820362000efe57565b519063ffffffff8216820362000efe57565b90600182811c9216801562001449575b60208310146200143357565b634e487b7160e01b600052602260045260246000fd5b91607f169162001427565b81811062001460575050565b600081556001016200145456fe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146103f757806305751204146103f257806306fdde03146103ed578063081812fc146103e8578063095ea7b3146103e35780630ca76175146103de57806312fc791c146103d95780631fe543e3146103d457806323b872dd146103cf57806324600fc3146103ca57806324f74697146103c557806329f0de3f146103c05780632b578c3d146103bb57806330cfeda9146103b65780633aab9274146103b15780633c50eec1146103ac5780633fc8cef3146103a757806342842e0e146103a25780634585e33b1461039d578063487125d51461039857806357970e93146103935780635dc228a01461038e57806361728f391461038957806362747e42146103845780636352211e1461037f57806366d63b2d1461037a578063673a7e281461037557806367e828bf146103705780636e02007d1461036b5780636e04ff0d146103665780636e74336b14610361578063705f876c1461035c57806370a0823114610357578063715018a614610352578063735de9f71461034d57806373d0022414610348578063741bef1a146103435780637ccfd7fc1461033e5780637ff9b5961461033957806381eb3d3d146103345780638da5cb5b1461032f57806395d89b411461032a57806399410739146103255780639ab1b48414610320578063a22cb4651461031b578063a3e56fa814610316578063af680da214610311578063b0fb162f1461030c578063b305ea7614610307578063b7b8012114610302578063b88d4fde146102fd578063bc83a52c146102f8578063c2229fea146102f3578063c87b56dd146102ee578063d58f05da146102e9578063dc070657146102e4578063e7572230146102df578063e985e9c5146102da578063ed647d21146102d5578063f0c9c688146102d0578063f2fde38b146102cb5763f68016b7146102c657600080fd5b612527565b612470565b61244f565b612424565b6123c2565b6123a4565b61226a565b612243565b6121d9565b612030565b612012565b611fc3565b611f23565b611eee565b611ecc565b611e5d565b611dcb565b611ced565b611cca565b611cae565b611c07565b611be0565b611bc4565b611b89565b611b62565b611b1e565b611b05565b611ade565b611a6c565b6119fb565b6119d3565b6119b5565b611911565b6118f3565b61184c565b611738565b61170c565b6116dd565b611636565b611618565b6115f1565b6115ca565b6114e1565b611431565b6113ad565b611386565b611365565b61124c565b611212565b6111f6565b61114f565b61103e565b610f84565b610f6d565b610eac565b610dc1565b610b2f565b6109f6565b61098b565b6108a8565b610603565b61042b565b7fffffffff0000000000000000000000000000000000000000000000000000000081160361042657565b600080fd5b346104265760206003193601126104265760207fffffffff0000000000000000000000000000000000000000000000000000000060043561046b816103fc565b167f80ac58cd0000000000000000000000000000000000000000000000000000000081149081156104d3575b81156104a9575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150143861049e565b7f5b5e139f0000000000000000000000000000000000000000000000000000000081149150610497565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161054057604052565b6104fd565b6040810190811067ffffffffffffffff82111761054057604052565b6060810190811067ffffffffffffffff82111761054057604052565b90601f601f19910116810190811067ffffffffffffffff82111761054057604052565b67ffffffffffffffff811161054057601f01601f191660200190565b81601f82011215610426578035906105d3826105a0565b926105e1604051948561057d565b8284526020838301011161042657816000926020809301838601378301015290565b60406003193601126104265760043567ffffffffffffffff602435818111610426576106339036906004016105bc565b61063c34612c30565b7f0000000000000000000000000000000000000000000000000000000000000000116107e05761066b83612a7b565b6001600160a01b03339116036107b657610724916106fa610714926106a261069d876000526008602052604060002090565b611831565b6106aa6131c7565b916106bc6106b6611773565b846136fa565b6106c4613211565b916106ce83612d2d565b526106d882612d2d565b506106e282612d3a565b526106ec81612d3a565b5080516107a6575b5061350f565b601854906019549263ffffffff8360401c16921690613245565b600052601a602052604060002090565b5561074661073a6012546001600160a01b031690565b6001600160a01b031690565b803b15610426576000600491604051928380927fd0e30db000000000000000000000000000000000000000000000000000000000825234905af180156107a15761078c57005b8061079961079f9261052c565b8061080a565b005b612b13565b6107b0908261373b565b386106f4565b60046040517f4143fbf9000000000000000000000000000000000000000000000000000000008152fd5b60046040517fa01a9df6000000000000000000000000000000000000000000000000000000008152fd5b600091031261042657565b906060519182815260005b8381106108405750601f19601f8460006020809697860101520116010190565b806080602092015182828501015201610820565b919082519283825260005b848110610880575050601f19601f8460006020809697860101520116010190565b60208183018101518483018201520161085f565b9060206108a5928181520190610854565b90565b346104265760008060031936011261098857604051908060018054916108cd83611065565b8086529282811690811561095e5750600114610904575b610900856108f48187038261057d565b60405191829182610894565b0390f35b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106109465750505081016020016108f4826109006108e4565b8054602085870181019190915290930192810161092b565b869550610900969350602092506108f494915060ff191682840152151560051b82010192936108e4565b80fd5b34610426576020600319360112610426576004356109a881612a7b565b50600052600560205260206001600160a01b0360406000205416604051908152f35b600435906001600160a01b038216820361042657565b602435906001600160a01b038216820361042657565b3461042657604060031936011261042657610a0f6109ca565b60243590610a1c82612a7b565b33151580610b1c575b80610ade575b610aad578261079f93610a7a926001600160a01b0380861691167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a46000526005602052604060002090565b906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152336004820152602490fd5b506001600160a01b038116600052600660205260ff610b14336040600020906001600160a01b0316600052602052604060002090565b541615610a2b565b50336001600160a01b0382161415610a25565b346104265760606003193601126104265767ffffffffffffffff60043560243582811161042657610b649036906004016105bc565b60443583811161042657610b7c9036906004016105bc565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610d1757815193841161054057610bc984610bc4601b54611065565b612d85565b602093601f8111600114610c905780610bfe939495600091610c85575b506000198260011b9260031b1c191617601b55614256565b805180610c2e575b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b6020820120610c3b61433f565b6020815191012003610c4e575b80610c06565b610c7f90610c7a610c6984600052601a602052604060002090565b546000526008602052604060002090565b614378565b38610c48565b905084015138610be6565b601b600052601f1981167f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc19060005b818110610cff575090610bfe949596836001949310610ce6575b5050811b01601b55614256565b86015160001960f88460031b161c191690553880610cd9565b85880151835560209788019760019093019201610cbf565b60046040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610d755750505050505090565b9091929394958480610db1837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610854565b9801930193019194939290610d65565b346104265760008060031936011261098857600990815490610de282610e94565b91604091610df28351948561057d565b818452601f19610e0183610e94565b01815b818110610e83575050805b828110610e23578351806109008782610d41565b610e7e908683528451610e6381610e5c81857f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af016110b8565b038261057d565b610e6d8288612d5a565b52610e788187612d5a565b50612f64565b610e0f565b806060602080938901015201610e04565b67ffffffffffffffff81116105405760051b60200190565b346104265760406003193601126104265760243567ffffffffffffffff8111610426573660238201121561042657806004013590610ee982610e94565b90610ef7604051928361057d565b82825260209260248484019160051b8301019136831161042657602401905b828210610f295761079f8460043561254e565b81358152908401908401610f16565b6003196060910112610426576001600160a01b0390600435828116810361042657916024359081168103610426579060443590565b346104265761079f610f7e36610f38565b916126ab565b3461042657600080600319360112610988576001600160a01b0380600a5416331415908161102f575b5061100557338152600c60205280808080604081208181549155335af1610fd2612b1f565b5015610fdb5780f35b60046040517f90b8ec18000000000000000000000000000000000000000000000000000000008152fd5b60046040517fa48f1bef000000000000000000000000000000000000000000000000000000008152fd5b9050600b541633141538610fad565b3461042657600060031936011261042657602063ffffffff600f5460101c16604051908152f35b90600182811c921680156110ae575b602083101461107f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611074565b90600092918054916110c983611065565b91828252600193848116908160001461112b57506001146110eb575b50505050565b90919394506000526020928360002092846000945b8386106111175750505050010190388080806110e5565b805485870183015294019385908201611100565b915050602094955060ff199193501683830152151560051b010190388080806110e5565b3461042657600080600319360112610988576040519080601c5461117281611065565b8085529160019180831690811561095e575060011461119b57610900856108f48187038261057d565b9250601c83527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2115b8284106111de5750505081016020016108f4826109006108e4565b805460208587018101919091529093019281016111c3565b346104265760206003193601126104265761079f60043561315e565b34610426576020600319360112610426576001600160a01b036112336109ca565b16600052600c6020526020604060002054604051908152f35b34610426576000600319360112610426576040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a0816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107a157600091611332575b50670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000081810291811591830414171561132d5761131861131d9161131261090094612bc7565b90612c26565b612cf0565b6040519081529081906020820190565b612b98565b611353915060a03d811161135e575b61134b818361057d565b810190612b66565b5050509050386112c4565b503d611341565b3461042657602061137e61137836610f38565b91614715565b604051908152f35b346104265760006003193601126104265760206001600160a01b0360125416604051908152f35b34610426576113bb36610f38565b60405191602083019383851067ffffffffffffffff8611176105405761079f94604052600084526128d8565b9060206003198301126104265760043567ffffffffffffffff9283821161042657806023830112156104265781600401359384116104265760248483010111610426576024019190565b346104265761143f366113e7565b5050602460206001600160a01b0360125416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa80156107a15766470de4df820000916000916114b3575b5010156114a357005b6114ab6145b1565b61079f61484b565b6114d4915060203d81116114da575b6114cc818361057d565b810190612d1e565b3861149a565b503d6114c2565b34610426576000600319360112610426576040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a0816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107a1576000916115a7575b50670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000081810291811591830414171561132d5761131861131d9161131261090094612bc7565b6115bf915060a03d811161135e5761134b818361057d565b505050905038611559565b346104265760006003193601126104265760206001600160a01b0360115416604051908152f35b346104265760006003193601126104265760206001600160a01b0360145416604051908152f35b34610426576000600319360112610426576020600e54604051908152f35b3461042657600080600319360112610988576040519080601b5461165981611065565b8085529160019180831690811561095e575060011461168257610900856108f48187038261057d565b9250601b83527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc15b8284106116c55750505081016020016108f4826109006108e4565b805460208587018101919091529093019281016116aa565b346104265760206003193601126104265760206116fb600435612a7b565b6001600160a01b0360405191168152f35b3461042657602060031936011261042657600435600052601a6020526020604060002054604051908152f35b346104265760006003193601126104265760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b604051906000826017549161178783611065565b8083529260019081811690811561180f57506001146117b0575b506117ae9250038361057d565b565b6017600090815291507fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c155b8483106117f457506117ae9350508101602001386117a1565b81935090816020925483858a010152019101909185926117db565b602093506117ae95925060ff1991501682840152151560051b820101386117a1565b906117ae61184592604051938480926110b8565b038361057d565b346104265760008060031936011261098857604051908060175461186f81611065565b8085529160019180831690811561095e575060011461189857610900856108f48187038261057d565b9250601783527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c155b8284106118db5750505081016020016108f4826109006108e4565b805460208587018101919091529093019281016118c0565b34610426576000600319360112610426576020600754604051908152f35b346104265761191f366113e7565b5050602460206001600160a01b0360125416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9081156107a157600091611997575b5066470de4df8200006040519110158152604060208201528061090060408201610815565b6119af915060203d81116114da576114cc818361057d565b38611972565b34610426576000600319360112610426576020601954604051908152f35b3461042657600060031936011261042657602067ffffffffffffffff60185416604051908152f35b34610426576020600319360112610426576001600160a01b03611a1c6109ca565b168015611a3b5760005260046020526020604060002054604051908152f35b60246040517f89c62b6400000000000000000000000000000000000000000000000000000000815260006004820152fd5b346104265760008060031936011261098857611a86612667565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346104265760006003193601126104265760206001600160a01b0360135416604051908152f35b346104265760006003193601126104265761079f6145b1565b346104265760006003193601126104265760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461042657600060031936011261042657602063ffffffff600f5460301c16604051908152f35b346104265760006003193601126104265760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346104265760206003193601126104265761079f60043561443e565b346104265760006003193601126104265760206001600160a01b0360005416604051908152f35b3461042657600080600319360112610988576040519080600254611c2a81611065565b8085529160019180831690811561095e5750600114611c5357610900856108f48187038261057d565b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b828410611c965750505081016020016108f4826109006108e4565b80546020858701810191909152909301928101611c7b565b346104265760206003193601126104265761079f6004356130a4565b346104265760006003193601126104265761079f61484b565b8015150361042657565b3461042657604060031936011261042657611d066109ca565b602435611d1281611ce3565b6001600160a01b038216918215611d9a57611d4d903360005260066020526040600020906001600160a01b0316600052602052604060002090565b60ff1981541660ff831515161790557f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160405180611d95339482919091602081019215159052565b0390a3005b602483604051907f5b08ba180000000000000000000000000000000000000000000000000000000082526004820152fd5b346104265760006003193601126104265760206001600160a01b03600d5416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600954811015611e585760096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190600090565b611df2565b346104265760206003193601126104265760043560095481101561042657610e5c611eb8610900926009600052604051928380927f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af016110b8565b604051918291602083526020830190610854565b3461042657600060031936011261042657602061ffff600f5416604051908152f35b3461042657602060031936011261042657600435600052601060205260206001600160a01b0360406000205416604051908152f35b34610426576020806003193601126104265767ffffffffffffffff6004358181116104265736602382011215610426578060040135611f6181610e94565b92611f6f604051948561057d565b818452848401906024809360051b8501019336851161042657838101925b858410611f9d5761079f8761493c565b8335838111610426578891611fb883928836918701016105bc565b815201930192611f8d565b3461042657608060031936011261042657611fdc6109ca565b611fe46109e0565b6064359167ffffffffffffffff83116104265761200861079f9336906004016105bc565b91604435916128d8565b34610426576000600319360112610426576020601554604051908152f35b6000806003193601126109885761204634612c30565b7f0000000000000000000000000000000000000000000000000000000000000000116107e057600d54600e54600f546040517f5d3b1d30000000000000000000000000000000000000000000000000000000008152600481019290925267ffffffffffffffff60a084901c16602483015261ffff8116604483015263ffffffff601082901c8116606484015260309190911c16608482015290602090829060a490829086906001600160a01b03165af19081156107a15782916121bb575b5061211d33610a7a836000526010602052604060002090565b61213261073a6012546001600160a01b031690565b82813b1561098857600491604051928380927fd0e30db000000000000000000000000000000000000000000000000000000000825234905af180156107a1576121a8575b5060405190815233907f50b52942a273ce144f2cd4fcb4359ec4d21c0f4eb404e2c9d5fb3536f89948eb90602090a280f35b806107996121b59261052c565b38612176565b6121d3915060203d81116114da576114cc818361057d565b38612104565b3461042657602060031936011261042657600435600754811015612219576000526008602052610900610e5c611eb86040600020604051928380926110b8565b60046040517fceea21b6000000000000000000000000000000000000000000000000000000008152fd5b346104265760006003193601126104265760206001600160a01b0360165416604051908152f35b34610426576020600319360112610426576122836109ca565b6001600160a01b0380600a541633149081159081612395575b50611005571561232c5761079f906122c7336001600160a01b0316600052600c602052604060002090565b54336000908152600c60205260408082208290556001600160a01b038416825290206122f6905b918254612d11565b90556001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000600a541617600a55565b336000908152600c60205260408082208054908390556001600160a01b0384168352912061079f92919061235f906122ee565b90556001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000600b541617600b55565b9050600b54163314153861229c565b3461042657602060031936011261042657602061137e600435612c30565b3461042657604060031936011261042657602060ff6124186123e26109ca565b6001600160a01b036123f26109e0565b9116600052600684526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b3461042657600060031936011261042657602067ffffffffffffffff600d5460a01c16604051908152f35b3461042657602060031936011261042657612468612667565b600435601555005b34610426576020600319360112610426576124896109ca565b612491612667565b6001600160a01b0380911680156124f6576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b3461042657600060031936011261042657602060185463ffffffff6040519160401c168152f35b906001600160a01b0390817f0000000000000000000000000000000000000000000000000000000000000000168033036126305750805115611e5857602001519060095492831561262b576117ae9361262693069060005260106020526125c160406000206001600160a01b0390541690565b6125cd60075482612f73565b6125f56125d983611e21565b506125f06007546000526008602052604060002090565b612e76565b600754928391167ffc612aad4e70fb3e1d4832d8c65f92e4024aa87f809d131267a79bceee757f33600080a4612f64565b600755565b612bf7565b604490604051907f1cf993f40000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b6001600160a01b0360005416330361267b57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b90916001600160a01b038084169283156128a757826000948186526003602052604096848888205416968791331515806127c3575b50906127457fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9284612790575b61272a816001600160a01b03166000526004602052604060002090565b60018154019055610a7a876000526003602052604060002090565b80a416928383036127565750505050565b6064945051927f64283d7b000000000000000000000000000000000000000000000000000000008452600484015260248301526044820152fd5b61279987612a3f565b6127b6856001600160a01b03166000526004602052604060002090565b600019815401905561270d565b91939450915080612850575b156127df578592918791386126e0565b8786886128185790517f7e2732890000000000000000000000000000000000000000000000000000000081526004810191909152602490fd5b90517f177e802f0000000000000000000000000000000000000000000000000000000081523360048201526024810191909152604490fd5b503387148015612876575b806127cf5750858252600560205233858984205416146127cf565b50868252600660205260ff6128a0338a8520906001600160a01b0316600052602052604060002090565b541661285b565b60246040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260006004820152fd5b919290926128e78185856126ab565b833b6128f35750505050565b6129319160209160405193849283927f150b7a0200000000000000000000000000000000000000000000000000000000978885523360048601612ae4565b038160006001600160a01b0388165af160009181612a0f575b506129a25782612958612b1f565b805191908261299b576040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602490fd5b9050602001fd5b7fffffffff0000000000000000000000000000000000000000000000000000000016036129d35750388080806110e5565b6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602490fd5b612a3191925060203d8111612a38575b612a29818361057d565b810190612acf565b903861294a565b503d612a1f565b612a53906000526005602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b8060005260036020526001600160a01b0360406000205416908115612a9e575090565b602490604051907f7e2732890000000000000000000000000000000000000000000000000000000082526004820152fd5b9081602091031261042657516108a5816103fc565b90926108a594936080936001600160a01b03809216845216602083015260408201528160608201520190610854565b6040513d6000823e3d90fd5b3d15612b4a573d90612b30826105a0565b91612b3e604051938461057d565b82523d6000602084013e565b606090565b519069ffffffffffffffffffff8216820361042657565b908160a091031261042657612b7a81612b4f565b916020820151916040810151916108a5608060608401519301612b4f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b906402540be4009182810292818404149015171561132d57565b908160011b918083046002149015171561132d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b811561262b570490565b6040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a0816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107a157600091612ccd575b506402540be4008082029180830482148115171561132d5783020291818304149015171561132d57670de0b6b3a7640000900490565b612ce5915060a03d811161135e5761134b818361057d565b505050905038612c97565b90655af3107a4000820180921161132d57565b906020820180921161132d57565b9190820180921161132d57565b90816020910312610426575190565b805115611e585760200190565b805160011015611e585760400190565b805160021015611e585760600190565b8051821015611e585760209160051b010190565b818110612d79575050565b60008155600101612d6e565b90601f8211612d92575050565b6117ae91601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1906020601f840160051c83019310612ddc575b601f0160051c0190612d6e565b9091508190612dcf565b90601f8211612df3575050565b6117ae91601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211906020601f840160051c83019310612ddc57601f0160051c0190612d6e565b9190601f8111612e4b57505050565b6117ae926000526020600020906020601f840160051c83019310612ddc57601f0160051c0190612d6e565b919091828114612f5f57612e8a8354611065565b67ffffffffffffffff811161054057612ead81612ea78454611065565b84612e3c565b600093601f8211600114612ee8579381929394600092612edd575b50506000198260011b9260031b1c1916179055565b015490503880612ec8565b612efc601f19831691600052602060002090565b94612f0c84600052602060002090565b91815b818110612f4757509583600195969710612f2e575b505050811b019055565b015460001960f88460031b161c19169055388080612f24565b87830154845560019384019390920191602001612f0f565b509050565b600019811461132d5760010190565b906001600160a01b038083169081156128a75782600052600360205260406000205416612fdb8115159485613037575b612fc0816001600160a01b03166000526004602052604060002090565b60018154019055610a7a856000526003602052604060002090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a461300657565b60246040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b61304085612a3f565b61305d836001600160a01b03166000526004602052604060002090565b6000198154019055612fa3565b9081602091031261042657516108a581611ce3565b6108a593926001600160a01b0360609316825260208201528160408201520190610854565b601154600d546040805167ffffffffffffffff60a084901c166020828101919091528082529094909390926001600160a01b0391821692600091906130e9908861057d565b613123604051978896879586947f4000aea0000000000000000000000000000000000000000000000000000000008652166004850161307f565b03925af180156107a1576131345750565b6131549060203d8111613157575b61314c818361057d565b81019061306a565b50565b503d613142565b6020613123916001600160a01b038060115416906014541691600060155493604051948686015285855261319185610545565b604051968795869485937f4000aea00000000000000000000000000000000000000000000000000000000085526004850161307f565b6040519060e0820182811067ffffffffffffffff82111761054057604052606060c08360008152600060208201526000604082015282808201528260808201528260a08201520152565b60409081519161322083610561565b600283528260005b82811061323457505050565b806060602080938501015201613228565b929060209267ffffffffffffffff9263ffffffff61329e60405197889687967f461d276200000000000000000000000000000000000000000000000000000000885216600487015260a0602487015260a4860190610854565b92600160448601521660648401526084830152038160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af19081156107a15760009161331a575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b613332915060203d81116114da576114cc818361057d565b386132f0565b6040519061334582610545565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600311156133aa57565b613371565b604051906133bc82610545565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b600111156133aa57565b604051906133ff82610545565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b6040519061343882610545565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b6040519061347182610545565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b604051906134aa82610545565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b604051906134e382610545565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b61351761378c565b90613529613523613338565b83613ec6565b6135468151613537816133a0565b613540816133a0565b8361384c565b6135516135236133af565b61356b6040820151613562816133e8565b613540816133e8565b6135766135236133f2565b613584606082015183613ec6565b60a081018051516136a1575b506080810190815151613609575b60c09150018051516135b1575b50515190565b916135bd6135236134d6565b6135c682613f4b565b60005b835180518210156135f657906135ec6135e5826135f194612d5a565b5185613e13565b612f64565b6135c9565b5050915061360381613fd7565b386135ab565b602081018051613618816133a0565b613621816133a0565b156136775760c09261365a6136729261364161363b613464565b88613ec6565b5161364b816133a0565b613654816133a0565b8661384c565b61366b61366561349d565b86613ec6565b5184613e13565b61359e565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b926136b36136ad61342b565b84613ec6565b6136bc83613f4b565b60005b845180518210156136e757906135ec6136db826136e294612d5a565b5186613ec6565b6136bf565b505092506136f482613fd7565b38613590565b815115613711576000808252604082015260600152565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b8151156137485760a00152565b60046040517ffe936cb7000000000000000000000000000000000000000000000000000000008152fd5b6040519061377f82610545565b6000602083606081520152565b60405161379881610545565b6137a0613772565b80825260208201600081526137b3613772565b506101006020830152604051809252600082526101208201918210610426576000916040525290565b90601f19820191821161132d57565b90600019820191821161132d57565b90613803613772565b50601f811680613832575b50806020830152604051908183526000825281016020019081106104265760405290565b6020036020811161132d57810180911161132d573861380e565b90815191613858613772565b50825151600181019081811161132d5760208501518110156138b1575b60c260206117ae96519283010153805182116138a9575b5050604051916020830152602082526138a482610545565b613e13565b52388061388c565b8160011b948286046002148315171561132d576020816138e36117ae986138dc60c2955191846137fa565b5082613d57565b5096505050613875565b6138f5613772565b50805151600181019081811161132d57602083015181101561392e575b605b6020845192830101538051821161392a57505090565b5290565b8160011b8281046002148315171561132d5761395790613950855191866137fa565b5084613d57565b50613912565b613965613772565b50805151600181019081811161132d57602083015181101561399a575b605a6020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d576139bc90613950855191866137fa565b50613982565b6139ca613772565b50805151600181019081811161132d5760208301518110156139ff575b60596020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613a2190613950855191866137fa565b506139e7565b613a2f613772565b50805151600181019081811161132d576020830151811015613a64575b60586020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613a8690613950855191866137fa565b50613a4c565b613a94613772565b50805151600181019081811161132d576020830151811015613ac9575b607b6020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613aeb90613950855191866137fa565b50613ab1565b613af9613772565b50805151600181019081811161132d576020830151811015613b2e575b607a6020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613b5090613950855191866137fa565b50613b16565b613b5e613772565b50805151600181019081811161132d576020830151811015613b93575b60796020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613bb590613950855191866137fa565b50613b7b565b613bc3613772565b50805151600181019081811161132d576020830151811015613bf8575b60786020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613c1a90613950855191866137fa565b50613be0565b90613c29613772565b50815151600181019182821161132d576020840151821015613c5c575b6020845192830101538051821161392a57505090565b8260011b8381046002148415171561132d57613c8590613c7e865191876137fa565b5085613d57565b50613c46565b90613c98825191836137fa565b50613ca1613772565b508051613cac613772565b50613cba8251821115613e0c565b82515192613cc88285612d11565b926020938285809401518211613d40575b5183815197820101968211613d38575b505001915b80821015613d10579060001991036101000a0190811990511690825116179052565b909192613d2c613d26613d329286518152612d03565b94612d03565b926137dc565b90613cee565b523880613ce9565b613d52613d4c83612be1565b82613c8b565b613cd9565b90613d60613772565b50805190613d6c613772565b50613d7a8151831115613e0c565b82515191613d888184612d11565b6020928391828701518111613df5575b865183815197820101968211613ded575b505001915b80821015613dd1579060001991036101000a019081199051169082511617905290565b909192613d2c613d26613de79286518152612d03565b90613dae565b523880613da9565b613e07613e0182612be1565b88613c8b565b613d98565b1561042657565b815161315492919067ffffffffffffffff81169060178211613e4b57613e439150604060ff845192161790613c20565b505b51613d57565b5060ff8111613e7057613e6a90613e628351613a27565b5082516141f0565b50613e45565b61ffff8111613e8f57613e6a90613e8783516139c2565b50825161416c565b63ffffffff8111613eb057613e6a90613ea8835161395d565b5082516140e8565b613e6a90613ebe83516138ed565b508251614064565b815161315492919067ffffffffffffffff81169060178211613ef657613e439150606060ff845192161790613c20565b5060ff8111613f0d57613e6a90613e628351613bbb565b61ffff8111613f2457613e6a90613e878351613b56565b63ffffffff8111613f3d57613e6a90613ea88351613af1565b613e6a90613ebe8351613a8c565b805190613f56613772565b50815151600181019081811161132d576020840151811015613fa4575b609f6020809551928301015380518211613f9c575b5050018051906001820180921161132d5752565b523880613f88565b8160011b938285046002148315171561132d57602081613fcd82976138dc609f955191846137fa565b5095505050613f73565b805190613fe2613772565b50815151600181019081811161132d576020840151811015614031575b60ff6020809551928301015380518211614029575b505001805190600019820191821161132d5752565b523880614014565b8160011b938285046002148315171561132d5760208161405a82976138dc60ff955191846137fa565b5095505050613fff565b9061406d613772565b5081515180600801918260081161132d57602084015183116140c7575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008251161790528051821161392a57505090565b8260011b8381046002148415171561132d576140e39085613c8b565b61408a565b906140f1613772565b5081515180600401918260041161132d576020840151831161414b575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008251161790528051821161392a57505090565b8260011b8381046002148415171561132d576141679085613c8b565b61410e565b90614175613772565b5081515180600201918260021161132d57602084015183116141cf575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008251161790528051821161392a57505090565b8260011b8381046002148415171561132d576141eb9085613c8b565b614192565b906141f9613772565b5081515180600101918260011161132d5760208401518311614235575b60018451928301019060ff198251161790528051821161392a57505090565b8260011b8381046002148415171561132d576142519085613c8b565b614216565b90815167ffffffffffffffff81116105405761427c81614277601c54611065565b612de6565b602080601f83116001146142b757508192936000926142ac575b50506000198260011b9260031b1c191617601c55565b015190503880614296565b90601f198316946142ea601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21190565b926000905b87821061432757505083600195961061430e575b505050811b01601c55565b015160001960f88460031b161c19169055388080614303565b806001859682949686015181550195019301906142ef565b6040519061434c82610545565b600d82527f696e76616c696420696e707574000000000000000000000000000000000000006020830152565b919091825167ffffffffffffffff81116105405761439a81612ea78454611065565b602080601f83116001146143d45750819293946000926143c95750506000198260011b9260031b1c1916179055565b015190503880612ec8565b90601f198316956143ea85600052602060002090565b926000905b8882106144265750508360019596971061440d57505050811b019055565b015160001960f88460031b161c19169055388080612f24565b806001859682949686015181550195019301906143ef565b6020613123916001600160a01b038060115416906016541691600067ffffffffffffffff6018541693604051948686015285855261319185610545565b604051906080820182811067ffffffffffffffff82111761054057604052600382526060366020840137565b604051906144b482610561565b600282526040366020840137565b60209081818403126104265780519067ffffffffffffffff821161042657019180601f840112156104265782516144f881610e94565b93614506604051958661057d565b818552838086019260051b820101928311610426578301905b82821061452d575050505090565b8151815290830190830161451f565b90815180825260208080930193019160005b82811061455c575050505090565b83516001600160a01b03168552938101939281019260010161454e565b916080936145a6916001600160a01b0393989796988552602085015260a0604085015260a084019061453c565b951660608201520152565b6145c661073a6012546001600160a01b031690565b6145db61073a6011546001600160a01b031690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602082602481865afa9283156107a1576146b39360009384916146e0575b50614662614635828585614715565b936146596146416144a7565b9461464b86612d2d565b906001600160a01b03169052565b61464b84612d3a565b8361467861073a6013546001600160a01b031690565b92604051968795869485937f38ed17390000000000000000000000000000000000000000000000000000000085524292309260048701614579565b03925af180156107a1576146c45750565b613154903d806000833e6146d8818361057d565b8101906144c2565b6146f8915060203d81116114da576114cc818361057d565b38614626565b6040906108a593928152816020820152019061453c565b90916147ba9261473061073a6012546001600160a01b031690565b6001600160a01b03808216808287161491821561483f575b50501561480557509160009161476f614659946147636144a7565b95869461464b86612d2d565b61478461073a6013546001600160a01b031690565b906040518096819482937fd06ca61f000000000000000000000000000000000000000000000000000000008452600484016146fe565b03915afa9081156107a1576147e2926000926147e6575b506147dc90516137eb565b90612d5a565b5190565b6147fe906147dc92933d8091833e6146d8818361057d565b91906147d1565b9161483a614828949261483160009561481c61447b565b97889661464b88612d2d565b61464b86612d3a565b61464b84612d4a565b61476f565b84161490503880614748565b61486061073a6011546001600160a01b031690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602090829060249082905afa80156107a15760059160009161491e575b50046148b5816130a4565b6148be8161315e565b6148c78161443e565b6148f56148dc600a546001600160a01b031690565b6001600160a01b0316600052600c602052604060002090565b614900828254612d11565b905561491a6122ee6148dc600b546001600160a01b031690565b9055565b614936915060203d81116114da576114cc818361057d565b386148aa565b90614945612667565b600091825b81518110156149c65761495d8183612d5a565b519060099182546801000000000000000081101561054057614986906001948582019055611e21565b61499a579061499491614378565b0161494a565b6024877f4e487b7100000000000000000000000000000000000000000000000000000000815280600452fd5b5050905056fea26469706673582212206cccd10a011f7b5db3ec94e65f17d4e71a1f0b8f5149ee80937334791555c37564736f6c63430008140033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6c624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c15",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146103f757806305751204146103f257806306fdde03146103ed578063081812fc146103e8578063095ea7b3146103e35780630ca76175146103de57806312fc791c146103d95780631fe543e3146103d457806323b872dd146103cf57806324600fc3146103ca57806324f74697146103c557806329f0de3f146103c05780632b578c3d146103bb57806330cfeda9146103b65780633aab9274146103b15780633c50eec1146103ac5780633fc8cef3146103a757806342842e0e146103a25780634585e33b1461039d578063487125d51461039857806357970e93146103935780635dc228a01461038e57806361728f391461038957806362747e42146103845780636352211e1461037f57806366d63b2d1461037a578063673a7e281461037557806367e828bf146103705780636e02007d1461036b5780636e04ff0d146103665780636e74336b14610361578063705f876c1461035c57806370a0823114610357578063715018a614610352578063735de9f71461034d57806373d0022414610348578063741bef1a146103435780637ccfd7fc1461033e5780637ff9b5961461033957806381eb3d3d146103345780638da5cb5b1461032f57806395d89b411461032a57806399410739146103255780639ab1b48414610320578063a22cb4651461031b578063a3e56fa814610316578063af680da214610311578063b0fb162f1461030c578063b305ea7614610307578063b7b8012114610302578063b88d4fde146102fd578063bc83a52c146102f8578063c2229fea146102f3578063c87b56dd146102ee578063d58f05da146102e9578063dc070657146102e4578063e7572230146102df578063e985e9c5146102da578063ed647d21146102d5578063f0c9c688146102d0578063f2fde38b146102cb5763f68016b7146102c657600080fd5b612527565b612470565b61244f565b612424565b6123c2565b6123a4565b61226a565b612243565b6121d9565b612030565b612012565b611fc3565b611f23565b611eee565b611ecc565b611e5d565b611dcb565b611ced565b611cca565b611cae565b611c07565b611be0565b611bc4565b611b89565b611b62565b611b1e565b611b05565b611ade565b611a6c565b6119fb565b6119d3565b6119b5565b611911565b6118f3565b61184c565b611738565b61170c565b6116dd565b611636565b611618565b6115f1565b6115ca565b6114e1565b611431565b6113ad565b611386565b611365565b61124c565b611212565b6111f6565b61114f565b61103e565b610f84565b610f6d565b610eac565b610dc1565b610b2f565b6109f6565b61098b565b6108a8565b610603565b61042b565b7fffffffff0000000000000000000000000000000000000000000000000000000081160361042657565b600080fd5b346104265760206003193601126104265760207fffffffff0000000000000000000000000000000000000000000000000000000060043561046b816103fc565b167f80ac58cd0000000000000000000000000000000000000000000000000000000081149081156104d3575b81156104a9575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150143861049e565b7f5b5e139f0000000000000000000000000000000000000000000000000000000081149150610497565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161054057604052565b6104fd565b6040810190811067ffffffffffffffff82111761054057604052565b6060810190811067ffffffffffffffff82111761054057604052565b90601f601f19910116810190811067ffffffffffffffff82111761054057604052565b67ffffffffffffffff811161054057601f01601f191660200190565b81601f82011215610426578035906105d3826105a0565b926105e1604051948561057d565b8284526020838301011161042657816000926020809301838601378301015290565b60406003193601126104265760043567ffffffffffffffff602435818111610426576106339036906004016105bc565b61063c34612c30565b7f0000000000000000000000000000000000000000000000000000000000000000116107e05761066b83612a7b565b6001600160a01b03339116036107b657610724916106fa610714926106a261069d876000526008602052604060002090565b611831565b6106aa6131c7565b916106bc6106b6611773565b846136fa565b6106c4613211565b916106ce83612d2d565b526106d882612d2d565b506106e282612d3a565b526106ec81612d3a565b5080516107a6575b5061350f565b601854906019549263ffffffff8360401c16921690613245565b600052601a602052604060002090565b5561074661073a6012546001600160a01b031690565b6001600160a01b031690565b803b15610426576000600491604051928380927fd0e30db000000000000000000000000000000000000000000000000000000000825234905af180156107a15761078c57005b8061079961079f9261052c565b8061080a565b005b612b13565b6107b0908261373b565b386106f4565b60046040517f4143fbf9000000000000000000000000000000000000000000000000000000008152fd5b60046040517fa01a9df6000000000000000000000000000000000000000000000000000000008152fd5b600091031261042657565b906060519182815260005b8381106108405750601f19601f8460006020809697860101520116010190565b806080602092015182828501015201610820565b919082519283825260005b848110610880575050601f19601f8460006020809697860101520116010190565b60208183018101518483018201520161085f565b9060206108a5928181520190610854565b90565b346104265760008060031936011261098857604051908060018054916108cd83611065565b8086529282811690811561095e5750600114610904575b610900856108f48187038261057d565b60405191829182610894565b0390f35b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106109465750505081016020016108f4826109006108e4565b8054602085870181019190915290930192810161092b565b869550610900969350602092506108f494915060ff191682840152151560051b82010192936108e4565b80fd5b34610426576020600319360112610426576004356109a881612a7b565b50600052600560205260206001600160a01b0360406000205416604051908152f35b600435906001600160a01b038216820361042657565b602435906001600160a01b038216820361042657565b3461042657604060031936011261042657610a0f6109ca565b60243590610a1c82612a7b565b33151580610b1c575b80610ade575b610aad578261079f93610a7a926001600160a01b0380861691167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a46000526005602052604060002090565b906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152336004820152602490fd5b506001600160a01b038116600052600660205260ff610b14336040600020906001600160a01b0316600052602052604060002090565b541615610a2b565b50336001600160a01b0382161415610a25565b346104265760606003193601126104265767ffffffffffffffff60043560243582811161042657610b649036906004016105bc565b60443583811161042657610b7c9036906004016105bc565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610d1757815193841161054057610bc984610bc4601b54611065565b612d85565b602093601f8111600114610c905780610bfe939495600091610c85575b506000198260011b9260031b1c191617601b55614256565b805180610c2e575b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b6020820120610c3b61433f565b6020815191012003610c4e575b80610c06565b610c7f90610c7a610c6984600052601a602052604060002090565b546000526008602052604060002090565b614378565b38610c48565b905084015138610be6565b601b600052601f1981167f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc19060005b818110610cff575090610bfe949596836001949310610ce6575b5050811b01601b55614256565b86015160001960f88460031b161c191690553880610cd9565b85880151835560209788019760019093019201610cbf565b60046040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610d755750505050505090565b9091929394958480610db1837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610854565b9801930193019194939290610d65565b346104265760008060031936011261098857600990815490610de282610e94565b91604091610df28351948561057d565b818452601f19610e0183610e94565b01815b818110610e83575050805b828110610e23578351806109008782610d41565b610e7e908683528451610e6381610e5c81857f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af016110b8565b038261057d565b610e6d8288612d5a565b52610e788187612d5a565b50612f64565b610e0f565b806060602080938901015201610e04565b67ffffffffffffffff81116105405760051b60200190565b346104265760406003193601126104265760243567ffffffffffffffff8111610426573660238201121561042657806004013590610ee982610e94565b90610ef7604051928361057d565b82825260209260248484019160051b8301019136831161042657602401905b828210610f295761079f8460043561254e565b81358152908401908401610f16565b6003196060910112610426576001600160a01b0390600435828116810361042657916024359081168103610426579060443590565b346104265761079f610f7e36610f38565b916126ab565b3461042657600080600319360112610988576001600160a01b0380600a5416331415908161102f575b5061100557338152600c60205280808080604081208181549155335af1610fd2612b1f565b5015610fdb5780f35b60046040517f90b8ec18000000000000000000000000000000000000000000000000000000008152fd5b60046040517fa48f1bef000000000000000000000000000000000000000000000000000000008152fd5b9050600b541633141538610fad565b3461042657600060031936011261042657602063ffffffff600f5460101c16604051908152f35b90600182811c921680156110ae575b602083101461107f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611074565b90600092918054916110c983611065565b91828252600193848116908160001461112b57506001146110eb575b50505050565b90919394506000526020928360002092846000945b8386106111175750505050010190388080806110e5565b805485870183015294019385908201611100565b915050602094955060ff199193501683830152151560051b010190388080806110e5565b3461042657600080600319360112610988576040519080601c5461117281611065565b8085529160019180831690811561095e575060011461119b57610900856108f48187038261057d565b9250601c83527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2115b8284106111de5750505081016020016108f4826109006108e4565b805460208587018101919091529093019281016111c3565b346104265760206003193601126104265761079f60043561315e565b34610426576020600319360112610426576001600160a01b036112336109ca565b16600052600c6020526020604060002054604051908152f35b34610426576000600319360112610426576040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a0816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107a157600091611332575b50670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000081810291811591830414171561132d5761131861131d9161131261090094612bc7565b90612c26565b612cf0565b6040519081529081906020820190565b612b98565b611353915060a03d811161135e575b61134b818361057d565b810190612b66565b5050509050386112c4565b503d611341565b3461042657602061137e61137836610f38565b91614715565b604051908152f35b346104265760006003193601126104265760206001600160a01b0360125416604051908152f35b34610426576113bb36610f38565b60405191602083019383851067ffffffffffffffff8611176105405761079f94604052600084526128d8565b9060206003198301126104265760043567ffffffffffffffff9283821161042657806023830112156104265781600401359384116104265760248483010111610426576024019190565b346104265761143f366113e7565b5050602460206001600160a01b0360125416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa80156107a15766470de4df820000916000916114b3575b5010156114a357005b6114ab6145b1565b61079f61484b565b6114d4915060203d81116114da575b6114cc818361057d565b810190612d1e565b3861149a565b503d6114c2565b34610426576000600319360112610426576040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a0816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107a1576000916115a7575b50670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000081810291811591830414171561132d5761131861131d9161131261090094612bc7565b6115bf915060a03d811161135e5761134b818361057d565b505050905038611559565b346104265760006003193601126104265760206001600160a01b0360115416604051908152f35b346104265760006003193601126104265760206001600160a01b0360145416604051908152f35b34610426576000600319360112610426576020600e54604051908152f35b3461042657600080600319360112610988576040519080601b5461165981611065565b8085529160019180831690811561095e575060011461168257610900856108f48187038261057d565b9250601b83527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc15b8284106116c55750505081016020016108f4826109006108e4565b805460208587018101919091529093019281016116aa565b346104265760206003193601126104265760206116fb600435612a7b565b6001600160a01b0360405191168152f35b3461042657602060031936011261042657600435600052601a6020526020604060002054604051908152f35b346104265760006003193601126104265760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b604051906000826017549161178783611065565b8083529260019081811690811561180f57506001146117b0575b506117ae9250038361057d565b565b6017600090815291507fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c155b8483106117f457506117ae9350508101602001386117a1565b81935090816020925483858a010152019101909185926117db565b602093506117ae95925060ff1991501682840152151560051b820101386117a1565b906117ae61184592604051938480926110b8565b038361057d565b346104265760008060031936011261098857604051908060175461186f81611065565b8085529160019180831690811561095e575060011461189857610900856108f48187038261057d565b9250601783527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c155b8284106118db5750505081016020016108f4826109006108e4565b805460208587018101919091529093019281016118c0565b34610426576000600319360112610426576020600754604051908152f35b346104265761191f366113e7565b5050602460206001600160a01b0360125416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9081156107a157600091611997575b5066470de4df8200006040519110158152604060208201528061090060408201610815565b6119af915060203d81116114da576114cc818361057d565b38611972565b34610426576000600319360112610426576020601954604051908152f35b3461042657600060031936011261042657602067ffffffffffffffff60185416604051908152f35b34610426576020600319360112610426576001600160a01b03611a1c6109ca565b168015611a3b5760005260046020526020604060002054604051908152f35b60246040517f89c62b6400000000000000000000000000000000000000000000000000000000815260006004820152fd5b346104265760008060031936011261098857611a86612667565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346104265760006003193601126104265760206001600160a01b0360135416604051908152f35b346104265760006003193601126104265761079f6145b1565b346104265760006003193601126104265760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461042657600060031936011261042657602063ffffffff600f5460301c16604051908152f35b346104265760006003193601126104265760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346104265760206003193601126104265761079f60043561443e565b346104265760006003193601126104265760206001600160a01b0360005416604051908152f35b3461042657600080600319360112610988576040519080600254611c2a81611065565b8085529160019180831690811561095e5750600114611c5357610900856108f48187038261057d565b9250600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b828410611c965750505081016020016108f4826109006108e4565b80546020858701810191909152909301928101611c7b565b346104265760206003193601126104265761079f6004356130a4565b346104265760006003193601126104265761079f61484b565b8015150361042657565b3461042657604060031936011261042657611d066109ca565b602435611d1281611ce3565b6001600160a01b038216918215611d9a57611d4d903360005260066020526040600020906001600160a01b0316600052602052604060002090565b60ff1981541660ff831515161790557f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160405180611d95339482919091602081019215159052565b0390a3005b602483604051907f5b08ba180000000000000000000000000000000000000000000000000000000082526004820152fd5b346104265760006003193601126104265760206001600160a01b03600d5416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600954811015611e585760096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190600090565b611df2565b346104265760206003193601126104265760043560095481101561042657610e5c611eb8610900926009600052604051928380927f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af016110b8565b604051918291602083526020830190610854565b3461042657600060031936011261042657602061ffff600f5416604051908152f35b3461042657602060031936011261042657600435600052601060205260206001600160a01b0360406000205416604051908152f35b34610426576020806003193601126104265767ffffffffffffffff6004358181116104265736602382011215610426578060040135611f6181610e94565b92611f6f604051948561057d565b818452848401906024809360051b8501019336851161042657838101925b858410611f9d5761079f8761493c565b8335838111610426578891611fb883928836918701016105bc565b815201930192611f8d565b3461042657608060031936011261042657611fdc6109ca565b611fe46109e0565b6064359167ffffffffffffffff83116104265761200861079f9336906004016105bc565b91604435916128d8565b34610426576000600319360112610426576020601554604051908152f35b6000806003193601126109885761204634612c30565b7f0000000000000000000000000000000000000000000000000000000000000000116107e057600d54600e54600f546040517f5d3b1d30000000000000000000000000000000000000000000000000000000008152600481019290925267ffffffffffffffff60a084901c16602483015261ffff8116604483015263ffffffff601082901c8116606484015260309190911c16608482015290602090829060a490829086906001600160a01b03165af19081156107a15782916121bb575b5061211d33610a7a836000526010602052604060002090565b61213261073a6012546001600160a01b031690565b82813b1561098857600491604051928380927fd0e30db000000000000000000000000000000000000000000000000000000000825234905af180156107a1576121a8575b5060405190815233907f50b52942a273ce144f2cd4fcb4359ec4d21c0f4eb404e2c9d5fb3536f89948eb90602090a280f35b806107996121b59261052c565b38612176565b6121d3915060203d81116114da576114cc818361057d565b38612104565b3461042657602060031936011261042657600435600754811015612219576000526008602052610900610e5c611eb86040600020604051928380926110b8565b60046040517fceea21b6000000000000000000000000000000000000000000000000000000008152fd5b346104265760006003193601126104265760206001600160a01b0360165416604051908152f35b34610426576020600319360112610426576122836109ca565b6001600160a01b0380600a541633149081159081612395575b50611005571561232c5761079f906122c7336001600160a01b0316600052600c602052604060002090565b54336000908152600c60205260408082208290556001600160a01b038416825290206122f6905b918254612d11565b90556001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000600a541617600a55565b336000908152600c60205260408082208054908390556001600160a01b0384168352912061079f92919061235f906122ee565b90556001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000600b541617600b55565b9050600b54163314153861229c565b3461042657602060031936011261042657602061137e600435612c30565b3461042657604060031936011261042657602060ff6124186123e26109ca565b6001600160a01b036123f26109e0565b9116600052600684526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b3461042657600060031936011261042657602067ffffffffffffffff600d5460a01c16604051908152f35b3461042657602060031936011261042657612468612667565b600435601555005b34610426576020600319360112610426576124896109ca565b612491612667565b6001600160a01b0380911680156124f6576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b3461042657600060031936011261042657602060185463ffffffff6040519160401c168152f35b906001600160a01b0390817f0000000000000000000000000000000000000000000000000000000000000000168033036126305750805115611e5857602001519060095492831561262b576117ae9361262693069060005260106020526125c160406000206001600160a01b0390541690565b6125cd60075482612f73565b6125f56125d983611e21565b506125f06007546000526008602052604060002090565b612e76565b600754928391167ffc612aad4e70fb3e1d4832d8c65f92e4024aa87f809d131267a79bceee757f33600080a4612f64565b600755565b612bf7565b604490604051907f1cf993f40000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b6001600160a01b0360005416330361267b57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b90916001600160a01b038084169283156128a757826000948186526003602052604096848888205416968791331515806127c3575b50906127457fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9284612790575b61272a816001600160a01b03166000526004602052604060002090565b60018154019055610a7a876000526003602052604060002090565b80a416928383036127565750505050565b6064945051927f64283d7b000000000000000000000000000000000000000000000000000000008452600484015260248301526044820152fd5b61279987612a3f565b6127b6856001600160a01b03166000526004602052604060002090565b600019815401905561270d565b91939450915080612850575b156127df578592918791386126e0565b8786886128185790517f7e2732890000000000000000000000000000000000000000000000000000000081526004810191909152602490fd5b90517f177e802f0000000000000000000000000000000000000000000000000000000081523360048201526024810191909152604490fd5b503387148015612876575b806127cf5750858252600560205233858984205416146127cf565b50868252600660205260ff6128a0338a8520906001600160a01b0316600052602052604060002090565b541661285b565b60246040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260006004820152fd5b919290926128e78185856126ab565b833b6128f35750505050565b6129319160209160405193849283927f150b7a0200000000000000000000000000000000000000000000000000000000978885523360048601612ae4565b038160006001600160a01b0388165af160009181612a0f575b506129a25782612958612b1f565b805191908261299b576040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602490fd5b9050602001fd5b7fffffffff0000000000000000000000000000000000000000000000000000000016036129d35750388080806110e5565b6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602490fd5b612a3191925060203d8111612a38575b612a29818361057d565b810190612acf565b903861294a565b503d612a1f565b612a53906000526005602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b8060005260036020526001600160a01b0360406000205416908115612a9e575090565b602490604051907f7e2732890000000000000000000000000000000000000000000000000000000082526004820152fd5b9081602091031261042657516108a5816103fc565b90926108a594936080936001600160a01b03809216845216602083015260408201528160608201520190610854565b6040513d6000823e3d90fd5b3d15612b4a573d90612b30826105a0565b91612b3e604051938461057d565b82523d6000602084013e565b606090565b519069ffffffffffffffffffff8216820361042657565b908160a091031261042657612b7a81612b4f565b916020820151916040810151916108a5608060608401519301612b4f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b906402540be4009182810292818404149015171561132d57565b908160011b918083046002149015171561132d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b811561262b570490565b6040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a0816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107a157600091612ccd575b506402540be4008082029180830482148115171561132d5783020291818304149015171561132d57670de0b6b3a7640000900490565b612ce5915060a03d811161135e5761134b818361057d565b505050905038612c97565b90655af3107a4000820180921161132d57565b906020820180921161132d57565b9190820180921161132d57565b90816020910312610426575190565b805115611e585760200190565b805160011015611e585760400190565b805160021015611e585760600190565b8051821015611e585760209160051b010190565b818110612d79575050565b60008155600101612d6e565b90601f8211612d92575050565b6117ae91601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1906020601f840160051c83019310612ddc575b601f0160051c0190612d6e565b9091508190612dcf565b90601f8211612df3575050565b6117ae91601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211906020601f840160051c83019310612ddc57601f0160051c0190612d6e565b9190601f8111612e4b57505050565b6117ae926000526020600020906020601f840160051c83019310612ddc57601f0160051c0190612d6e565b919091828114612f5f57612e8a8354611065565b67ffffffffffffffff811161054057612ead81612ea78454611065565b84612e3c565b600093601f8211600114612ee8579381929394600092612edd575b50506000198260011b9260031b1c1916179055565b015490503880612ec8565b612efc601f19831691600052602060002090565b94612f0c84600052602060002090565b91815b818110612f4757509583600195969710612f2e575b505050811b019055565b015460001960f88460031b161c19169055388080612f24565b87830154845560019384019390920191602001612f0f565b509050565b600019811461132d5760010190565b906001600160a01b038083169081156128a75782600052600360205260406000205416612fdb8115159485613037575b612fc0816001600160a01b03166000526004602052604060002090565b60018154019055610a7a856000526003602052604060002090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a461300657565b60246040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260006004820152fd5b61304085612a3f565b61305d836001600160a01b03166000526004602052604060002090565b6000198154019055612fa3565b9081602091031261042657516108a581611ce3565b6108a593926001600160a01b0360609316825260208201528160408201520190610854565b601154600d546040805167ffffffffffffffff60a084901c166020828101919091528082529094909390926001600160a01b0391821692600091906130e9908861057d565b613123604051978896879586947f4000aea0000000000000000000000000000000000000000000000000000000008652166004850161307f565b03925af180156107a1576131345750565b6131549060203d8111613157575b61314c818361057d565b81019061306a565b50565b503d613142565b6020613123916001600160a01b038060115416906014541691600060155493604051948686015285855261319185610545565b604051968795869485937f4000aea00000000000000000000000000000000000000000000000000000000085526004850161307f565b6040519060e0820182811067ffffffffffffffff82111761054057604052606060c08360008152600060208201526000604082015282808201528260808201528260a08201520152565b60409081519161322083610561565b600283528260005b82811061323457505050565b806060602080938501015201613228565b929060209267ffffffffffffffff9263ffffffff61329e60405197889687967f461d276200000000000000000000000000000000000000000000000000000000885216600487015260a0602487015260a4860190610854565b92600160448601521660648401526084830152038160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af19081156107a15760009161331a575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b613332915060203d81116114da576114cc818361057d565b386132f0565b6040519061334582610545565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600311156133aa57565b613371565b604051906133bc82610545565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b600111156133aa57565b604051906133ff82610545565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b6040519061343882610545565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b6040519061347182610545565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b604051906134aa82610545565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b604051906134e382610545565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b61351761378c565b90613529613523613338565b83613ec6565b6135468151613537816133a0565b613540816133a0565b8361384c565b6135516135236133af565b61356b6040820151613562816133e8565b613540816133e8565b6135766135236133f2565b613584606082015183613ec6565b60a081018051516136a1575b506080810190815151613609575b60c09150018051516135b1575b50515190565b916135bd6135236134d6565b6135c682613f4b565b60005b835180518210156135f657906135ec6135e5826135f194612d5a565b5185613e13565b612f64565b6135c9565b5050915061360381613fd7565b386135ab565b602081018051613618816133a0565b613621816133a0565b156136775760c09261365a6136729261364161363b613464565b88613ec6565b5161364b816133a0565b613654816133a0565b8661384c565b61366b61366561349d565b86613ec6565b5184613e13565b61359e565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b926136b36136ad61342b565b84613ec6565b6136bc83613f4b565b60005b845180518210156136e757906135ec6136db826136e294612d5a565b5186613ec6565b6136bf565b505092506136f482613fd7565b38613590565b815115613711576000808252604082015260600152565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b8151156137485760a00152565b60046040517ffe936cb7000000000000000000000000000000000000000000000000000000008152fd5b6040519061377f82610545565b6000602083606081520152565b60405161379881610545565b6137a0613772565b80825260208201600081526137b3613772565b506101006020830152604051809252600082526101208201918210610426576000916040525290565b90601f19820191821161132d57565b90600019820191821161132d57565b90613803613772565b50601f811680613832575b50806020830152604051908183526000825281016020019081106104265760405290565b6020036020811161132d57810180911161132d573861380e565b90815191613858613772565b50825151600181019081811161132d5760208501518110156138b1575b60c260206117ae96519283010153805182116138a9575b5050604051916020830152602082526138a482610545565b613e13565b52388061388c565b8160011b948286046002148315171561132d576020816138e36117ae986138dc60c2955191846137fa565b5082613d57565b5096505050613875565b6138f5613772565b50805151600181019081811161132d57602083015181101561392e575b605b6020845192830101538051821161392a57505090565b5290565b8160011b8281046002148315171561132d5761395790613950855191866137fa565b5084613d57565b50613912565b613965613772565b50805151600181019081811161132d57602083015181101561399a575b605a6020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d576139bc90613950855191866137fa565b50613982565b6139ca613772565b50805151600181019081811161132d5760208301518110156139ff575b60596020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613a2190613950855191866137fa565b506139e7565b613a2f613772565b50805151600181019081811161132d576020830151811015613a64575b60586020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613a8690613950855191866137fa565b50613a4c565b613a94613772565b50805151600181019081811161132d576020830151811015613ac9575b607b6020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613aeb90613950855191866137fa565b50613ab1565b613af9613772565b50805151600181019081811161132d576020830151811015613b2e575b607a6020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613b5090613950855191866137fa565b50613b16565b613b5e613772565b50805151600181019081811161132d576020830151811015613b93575b60796020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613bb590613950855191866137fa565b50613b7b565b613bc3613772565b50805151600181019081811161132d576020830151811015613bf8575b60786020845192830101538051821161392a57505090565b8160011b8281046002148315171561132d57613c1a90613950855191866137fa565b50613be0565b90613c29613772565b50815151600181019182821161132d576020840151821015613c5c575b6020845192830101538051821161392a57505090565b8260011b8381046002148415171561132d57613c8590613c7e865191876137fa565b5085613d57565b50613c46565b90613c98825191836137fa565b50613ca1613772565b508051613cac613772565b50613cba8251821115613e0c565b82515192613cc88285612d11565b926020938285809401518211613d40575b5183815197820101968211613d38575b505001915b80821015613d10579060001991036101000a0190811990511690825116179052565b909192613d2c613d26613d329286518152612d03565b94612d03565b926137dc565b90613cee565b523880613ce9565b613d52613d4c83612be1565b82613c8b565b613cd9565b90613d60613772565b50805190613d6c613772565b50613d7a8151831115613e0c565b82515191613d888184612d11565b6020928391828701518111613df5575b865183815197820101968211613ded575b505001915b80821015613dd1579060001991036101000a019081199051169082511617905290565b909192613d2c613d26613de79286518152612d03565b90613dae565b523880613da9565b613e07613e0182612be1565b88613c8b565b613d98565b1561042657565b815161315492919067ffffffffffffffff81169060178211613e4b57613e439150604060ff845192161790613c20565b505b51613d57565b5060ff8111613e7057613e6a90613e628351613a27565b5082516141f0565b50613e45565b61ffff8111613e8f57613e6a90613e8783516139c2565b50825161416c565b63ffffffff8111613eb057613e6a90613ea8835161395d565b5082516140e8565b613e6a90613ebe83516138ed565b508251614064565b815161315492919067ffffffffffffffff81169060178211613ef657613e439150606060ff845192161790613c20565b5060ff8111613f0d57613e6a90613e628351613bbb565b61ffff8111613f2457613e6a90613e878351613b56565b63ffffffff8111613f3d57613e6a90613ea88351613af1565b613e6a90613ebe8351613a8c565b805190613f56613772565b50815151600181019081811161132d576020840151811015613fa4575b609f6020809551928301015380518211613f9c575b5050018051906001820180921161132d5752565b523880613f88565b8160011b938285046002148315171561132d57602081613fcd82976138dc609f955191846137fa565b5095505050613f73565b805190613fe2613772565b50815151600181019081811161132d576020840151811015614031575b60ff6020809551928301015380518211614029575b505001805190600019820191821161132d5752565b523880614014565b8160011b938285046002148315171561132d5760208161405a82976138dc60ff955191846137fa565b5095505050613fff565b9061406d613772565b5081515180600801918260081161132d57602084015183116140c7575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008251161790528051821161392a57505090565b8260011b8381046002148415171561132d576140e39085613c8b565b61408a565b906140f1613772565b5081515180600401918260041161132d576020840151831161414b575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008251161790528051821161392a57505090565b8260011b8381046002148415171561132d576141679085613c8b565b61410e565b90614175613772565b5081515180600201918260021161132d57602084015183116141cf575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008251161790528051821161392a57505090565b8260011b8381046002148415171561132d576141eb9085613c8b565b614192565b906141f9613772565b5081515180600101918260011161132d5760208401518311614235575b60018451928301019060ff198251161790528051821161392a57505090565b8260011b8381046002148415171561132d576142519085613c8b565b614216565b90815167ffffffffffffffff81116105405761427c81614277601c54611065565b612de6565b602080601f83116001146142b757508192936000926142ac575b50506000198260011b9260031b1c191617601c55565b015190503880614296565b90601f198316946142ea601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21190565b926000905b87821061432757505083600195961061430e575b505050811b01601c55565b015160001960f88460031b161c19169055388080614303565b806001859682949686015181550195019301906142ef565b6040519061434c82610545565b600d82527f696e76616c696420696e707574000000000000000000000000000000000000006020830152565b919091825167ffffffffffffffff81116105405761439a81612ea78454611065565b602080601f83116001146143d45750819293946000926143c95750506000198260011b9260031b1c1916179055565b015190503880612ec8565b90601f198316956143ea85600052602060002090565b926000905b8882106144265750508360019596971061440d57505050811b019055565b015160001960f88460031b161c19169055388080612f24565b806001859682949686015181550195019301906143ef565b6020613123916001600160a01b038060115416906016541691600067ffffffffffffffff6018541693604051948686015285855261319185610545565b604051906080820182811067ffffffffffffffff82111761054057604052600382526060366020840137565b604051906144b482610561565b600282526040366020840137565b60209081818403126104265780519067ffffffffffffffff821161042657019180601f840112156104265782516144f881610e94565b93614506604051958661057d565b818552838086019260051b820101928311610426578301905b82821061452d575050505090565b8151815290830190830161451f565b90815180825260208080930193019160005b82811061455c575050505090565b83516001600160a01b03168552938101939281019260010161454e565b916080936145a6916001600160a01b0393989796988552602085015260a0604085015260a084019061453c565b951660608201520152565b6145c661073a6012546001600160a01b031690565b6145db61073a6011546001600160a01b031690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602082602481865afa9283156107a1576146b39360009384916146e0575b50614662614635828585614715565b936146596146416144a7565b9461464b86612d2d565b906001600160a01b03169052565b61464b84612d3a565b8361467861073a6013546001600160a01b031690565b92604051968795869485937f38ed17390000000000000000000000000000000000000000000000000000000085524292309260048701614579565b03925af180156107a1576146c45750565b613154903d806000833e6146d8818361057d565b8101906144c2565b6146f8915060203d81116114da576114cc818361057d565b38614626565b6040906108a593928152816020820152019061453c565b90916147ba9261473061073a6012546001600160a01b031690565b6001600160a01b03808216808287161491821561483f575b50501561480557509160009161476f614659946147636144a7565b95869461464b86612d2d565b61478461073a6013546001600160a01b031690565b906040518096819482937fd06ca61f000000000000000000000000000000000000000000000000000000008452600484016146fe565b03915afa9081156107a1576147e2926000926147e6575b506147dc90516137eb565b90612d5a565b5190565b6147fe906147dc92933d8091833e6146d8818361057d565b91906147d1565b9161483a614828949261483160009561481c61447b565b97889661464b88612d2d565b61464b86612d3a565b61464b84612d4a565b61476f565b84161490503880614748565b61486061073a6011546001600160a01b031690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602090829060249082905afa80156107a15760059160009161491e575b50046148b5816130a4565b6148be8161315e565b6148c78161443e565b6148f56148dc600a546001600160a01b031690565b6001600160a01b0316600052600c602052604060002090565b614900828254612d11565b905561491a6122ee6148dc600b546001600160a01b031690565b9055565b614936915060203d81116114da576114cc818361057d565b386148aa565b90614945612667565b600091825b81518110156149c65761495d8183612d5a565b519060099182546801000000000000000081101561054057614986906001948582019055611e21565b61499a579061499491614378565b0161494a565b6024877f4e487b7100000000000000000000000000000000000000000000000000000000815280600452fd5b5050905056fea26469706673582212206cccd10a011f7b5db3ec94e65f17d4e71a1f0b8f5149ee80937334791555c37564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2606,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2915,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2917,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2921,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2925,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2929,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2935,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5670,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5674,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "tokenUris",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5677,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "generalUris",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5679,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "beneficiary1",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5681,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "beneficiary2",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5685,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "proceeds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5695,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(VRFCoordinatorV2Interface)1163"
      },
      {
        "astId": 5697,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "vrfSubscriptionId",
        "offset": 20,
        "slot": "13",
        "type": "t_uint64"
      },
      {
        "astId": 5699,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "keyHash",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 5701,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "requestConfirmations",
        "offset": 0,
        "slot": "15",
        "type": "t_uint16"
      },
      {
        "astId": 5703,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "callbackGasLimit",
        "offset": 2,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 5706,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "numWords",
        "offset": 6,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 5710,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "vrfRrequests",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5713,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "linkToken",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(LinkTokenInterface)1258"
      },
      {
        "astId": 5716,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "weth",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IWETH)5604"
      },
      {
        "astId": 5719,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IUniswapV2Router)5557"
      },
      {
        "astId": 5721,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "automationRegistry",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 5723,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "automationSubscriptionId",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 5725,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "functionsRouter",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 5728,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "source",
        "offset": 0,
        "slot": "23",
        "type": "t_string_storage"
      },
      {
        "astId": 5730,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "functionsSubscriptionId",
        "offset": 0,
        "slot": "24",
        "type": "t_uint64"
      },
      {
        "astId": 5732,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "gasLimit",
        "offset": 8,
        "slot": "24",
        "type": "t_uint32"
      },
      {
        "astId": 5734,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "donID",
        "offset": 0,
        "slot": "25",
        "type": "t_bytes32"
      },
      {
        "astId": 5738,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "functionsRequests",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5740,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "lastResponse",
        "offset": 0,
        "slot": "27",
        "type": "t_bytes_storage"
      },
      {
        "astId": 5742,
        "contract": "contracts/MagisterMilitum.sol:MagisterMilitum",
        "label": "lastError",
        "offset": 0,
        "slot": "28",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router)5557": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)5604": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1258": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)1163": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}